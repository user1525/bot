import logging
import sqlite3
import csv
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    ApplicationBuilder,
    CommandHandler,
    CallbackQueryHandler,
    MessageHandler,
    filters,
    ConversationHandler,
    ContextTypes,
    CallbackContext
)
from datetime import datetime, timedelta
import os

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è ConversationHandler
CHOOSING, TYPING_APPLICATION, TYPING_ADMIN_INPUT, EDITING = range(4)

# ID –∫–∞–Ω–∞–ª–æ–≤ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏
CHANNEL_RUSTRIC = "@rustrics"
CHANNEL_DENZI = "@denziserver"

# ID –∞–¥–º–∏–Ω–æ–≤ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é
ADMIN_IDS = "7642825895,1947369214"  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–µ ID –∞–¥–º–∏–Ω–æ–≤

# ID —á–∞—Ç–∞ –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
NOTIFICATION_CHAT_ID = -1002569594175

# –ü–µ—Ä–∏–æ–¥ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ä—ã—Ö –∑–∞—è–≤–æ–∫ (–≤ —Å–µ–∫—É–Ω–¥–∞—Ö)
CHECK_OLD_APPLICATIONS_INTERVAL = 86400  # 1 –¥–µ–Ω—å

# –§–∞–π–ª –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è—Ö
USERS_FILE = 'users.csv'

# –ì–ª–æ–±–∞–ª—å–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è –ø–µ—Ä–∏–æ–¥–∞ –∞–≤—Ç–æ—É–¥–∞–ª–µ–Ω–∏—è (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 3 –¥–Ω—è)
AUTO_DELETE_DAYS = 3

# –¢–∏–ø—ã –∫–æ–º–∞–Ω–¥
TEAM_TYPES = {
    'duo': 'Duo',
    'trio': 'Trio',
    'quad': 'Quad',
    'quad_plus': 'Quad+',
    'clan': '–ö–ª–∞–Ω'
}

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
def init_db():
    conn = sqlite3.connect('rust_bot.db')
    cursor = conn.cursor()
    
    cursor.execute('''
    CREATE TABLE IF NOT EXISTS users (
        user_id INTEGER PRIMARY KEY,
        username TEXT,
        registration_date TEXT
    )''')
    
    cursor.execute('''
    CREATE TABLE IF NOT EXISTS applications (
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        user_id INTEGER,
        app_type TEXT,
        team_type TEXT,
        age TEXT,
        hours TEXT,
        role TEXT,
        online TEXT,
        discord TEXT,
        clan_name TEXT,
        leader_name TEXT,
        required TEXT,
        members_count TEXT,
        date TEXT,
        is_active INTEGER DEFAULT 1,
        FOREIGN KEY (user_id) REFERENCES users (user_id)
    )''')
    
    # –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–µ–∫, –µ—Å–ª–∏ –µ–µ –Ω–µ—Ç
    cursor.execute('''
    CREATE TABLE IF NOT EXISTS bot_settings (
        key TEXT PRIMARY KEY,
        value TEXT
    )''')
    
    # –ü—ã—Ç–∞–µ–º—Å—è –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –ø–µ—Ä–∏–æ–¥–∞ –∞–≤—Ç–æ—É–¥–∞–ª–µ–Ω–∏—è
    cursor.execute('SELECT value FROM bot_settings WHERE key = "auto_delete_days"')
    result = cursor.fetchone()
    if result:
        global AUTO_DELETE_DAYS
        AUTO_DELETE_DAYS = int(result[0])
    
    conn.commit()
    conn.close()

init_db()

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ñ–∞–π–ª–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
def init_users_file():
    if not os.path.exists(USERS_FILE):
        with open(USERS_FILE, mode='w', newline='', encoding='utf-8') as file:
            writer = csv.writer(file)
            writer.writerow(['user_id', 'username', 'registration_date'])

init_users_file()

# –£—Ç–∏–ª–∏—Ç—ã
def create_button(text, callback_data):
    return InlineKeyboardButton(text, callback_data=callback_data)

def save_user(user_id, username):
    # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    conn = sqlite3.connect('rust_bot.db')
    cursor = conn.cursor()
    cursor.execute('SELECT 1 FROM users WHERE user_id = ?', (user_id,))
    if not cursor.fetchone():
        cursor.execute(
            'INSERT INTO users (user_id, username, registration_date) VALUES (?, ?, ?)',
            (user_id, username, datetime.now().strftime("%d.%m.%Y %H:%M"))
        )
    conn.commit()
    conn.close()
    
    # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ CSV —Ñ–∞–π–ª
    user_exists = False
    with open(USERS_FILE, mode='r', newline='', encoding='utf-8') as file:
        reader = csv.reader(file)
        for row in reader:
            if row and row[0] == str(user_id):
                user_exists = True
                break
    
    if not user_exists:
        with open(USERS_FILE, mode='a', newline='', encoding='utf-8') as file:
            writer = csv.writer(file)
            writer.writerow([user_id, username, datetime.now().strftime("%d.%m.%Y %H:%M")])

async def check_subscription(update: Update, context: ContextTypes.DEFAULT_TYPE) -> bool:
    user = update.effective_user
    try:
        member_rustric = await context.bot.get_chat_member(CHANNEL_RUSTRIC, user.id)
        member_denzi = await context.bot.get_chat_member(CHANNEL_DENZI, user.id)
        return (member_rustric.status in ['member', 'administrator', 'creator'] and 
                member_denzi.status in ['member', 'administrator', 'creator'])
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø–æ–¥–ø–∏—Å–∫–∏: {e}")
        return False

async def delete_old_applications(context: CallbackContext):
    conn = sqlite3.connect('rust_bot.db')
    cursor = conn.cursor()
    
    days_ago = (datetime.now() - timedelta(days=AUTO_DELETE_DAYS)).strftime("%d.%m.%Y %H:%M")
    
    cursor.execute('''
    SELECT id, user_id, app_type FROM applications 
    WHERE date < ? AND is_active = 1
    ''', (days_ago,))
    
    old_apps = cursor.fetchall()
    
    for app_id, user_id, app_type in old_apps:
        cursor.execute('UPDATE applications SET is_active = 0 WHERE id = ?', (app_id,))
        
        try:
            message = f"üïí –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –Ω–∞ –ø–æ–∏—Å–∫ —Ç–∏–º–º–µ–π—Ç–∞ –±—ã–ª–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —É–¥–∞–ª–µ–Ω–∞ –∏–∑ —Å–∏—Å—Ç–µ–º—ã –ø–æ –∏—Å—Ç–µ—á–µ–Ω–∏–∏ {AUTO_DELETE_DAYS} –¥–Ω–µ–π."
            if app_type == 'clan':
                message = f"üïí –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –Ω–∞ –ø–æ–∏—Å–∫ –∫–ª–∞–Ω–∞ –±—ã–ª–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —É–¥–∞–ª–µ–Ω–∞ –∏–∑ —Å–∏—Å—Ç–µ–º—ã –ø–æ –∏—Å—Ç–µ—á–µ–Ω–∏–∏ {AUTO_DELETE_DAYS} –¥–Ω–µ–π."
            
            await context.bot.send_message(chat_id=user_id, text=message)
        except Exception as e:
            logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")
    
    conn.commit()
    conn.close()
    logger.info(f"–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —É–¥–∞–ª–µ–Ω–æ {len(old_apps)} –∑–∞—è–≤–æ–∫ —Å—Ç–∞—Ä—à–µ {AUTO_DELETE_DAYS} –¥–Ω–µ–π")

async def send_welcome_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    welcome_text = (
        "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Rust Search Team Bot!\n\n"
        "–≠—Ç–æ—Ç –±–æ—Ç —Å–æ–∑–¥–∞–Ω –¥–ª—è –ø–æ–∏—Å–∫–∞ —Ç–∏–º–º–µ–π—Ç–æ–≤ –∏ –∫–ª–∞–Ω–æ–≤ –≤ –∏–≥—Ä–µ Rust.\n\n"
        "‚≠êÔ∏è –í—ã –º–æ–∂–µ—Ç–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è –∫–∞–∫ —Å–æ–∏—Å–∫–∞—Ç–µ–ª—å –∏ –Ω–∞–π—Ç–∏ —Å–µ–±–µ –∫–æ–º–∞–Ω–¥—É –∏–ª–∏ –∫–∞–∫ –ª–∏–¥–µ—Ä –∫–ª–∞–Ω–∞ –∏ –Ω–∞–π—Ç–∏ –Ω–æ–≤—ã—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤\n\n"
        "‚úÖ –ë–æ—Ç –∞–±—Å–æ–ª—é—Ç–Ω–æ –±–µ—Å–ø–ª–∞—Ç–Ω—ã–π –∏ –ø–æ–º–æ–∂–µ—Ç –≤–∞–º:\n"
        "- –ù–∞–π—Ç–∏ –Ω–∞–¥–µ–∂–Ω—ã—Ö —Ç–∏–º–º–µ–π—Ç–æ–≤\n"
        "- –í—Å—Ç—É–ø–∏—Ç—å –≤ –∞–∫—Ç–∏–≤–Ω—ã–π –∫–ª–∞–Ω\n"
        "- –°–æ–∑–¥–∞—Ç—å —Å–≤–æ—é –∫–æ–º–∞–Ω–¥—É\n\n"
        "–î–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã –ø–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –Ω–∞—à–∏ –∫–∞–Ω–∞–ª—ã –∏ –Ω–∞–∂–º–∏—Ç–µ /start"
    )
    
    keyboard = [
        [InlineKeyboardButton("Rustric", url=f"https://t.me/{CHANNEL_RUSTRIC[1:]}")],
        [InlineKeyboardButton("–î—ç–Ω–∑–∏", url=f"https://t.me/{CHANNEL_DENZI[1:]}")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await context.bot.send_message(
        chat_id=update.effective_chat.id,
        text=welcome_text,
        reply_markup=reply_markup
    )

async def safe_edit_message(query, text, reply_markup=None):
    if query is None or query.message is None:
        logger.error("–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ: query –∏–ª–∏ query.message —Ä–∞–≤–Ω–æ None")
        return
    
    try:
        await query.edit_message_text(
            text=text,
            reply_markup=reply_markup,
            parse_mode='HTML'
        )
    except Exception as e:
        if "Message is not modified" in str(e):
            logger.debug("–°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –∏–∑–º–µ–Ω–µ–Ω–æ (—Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –∏–¥–µ–Ω—Ç–∏—á–Ω–æ)")
        elif "Message to edit not found" in str(e):
            logger.debug("–°–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–æ, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ")
            try:
                await query.message.reply_text(
                    text=text,
                    reply_markup=reply_markup
                )
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –Ω–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
        else:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")

# –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    if not update.effective_chat or not update.effective_user:
        logger.error("–ù–µ–≤–µ—Ä–Ω—ã–π update –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ start")
        return ConversationHandler.END
    
    if not await check_subscription(update, context):
        await send_welcome_message(update, context)
        return ConversationHandler.END
    
    user = update.effective_user
    save_user(user.id, user.username or user.first_name)
    
    context.user_data.clear()
    
    welcome_text = (
        "üîÑ <b>–í–Ω–∏–º–∞–Ω–∏–µ!</b> –í—ã –≤—Å–µ–≥–¥–∞ –º–æ–∂–µ—Ç–µ –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞ –∫–æ–º–∞–Ω–¥–æ–π /start\n\n"
        "üè† <b>–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é</b>:"
    )
    
    keyboard = [
        [create_button("üîç –ù–∞–π—Ç–∏ –¢–∏–º–º–µ–π—Ç–∞", 'find_teammate')],
        [create_button("üè∞ –ö–ª–∞–Ω", 'find_clan')],
        [create_button("‚ùå –£–¥–∞–ª–∏—Ç—å—Å—è –∏–∑ –ø–æ–∏—Å–∫–∞", 'remove_from_search')],
        [create_button("üìö –ì–∞–π–¥ –ø–æ –±–æ—Ç—É", 'guide')]
    ]
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –∞–¥–º–∏–Ω–∞ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω
    if str(user.id) in ADMIN_IDS.split(','):
        keyboard.append([create_button("üëë –ê–¥–º–∏–Ω—É", 'admin_panel')])
    
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    try:
        if update.callback_query:
            try:
                await update.callback_query.answer()
                await safe_edit_message(
                    update.callback_query,
                    welcome_text,
                    reply_markup
                )
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ callback_query: {e}")
                await context.bot.send_message(
                    chat_id=update.effective_chat.id,
                    text=welcome_text,
                    reply_markup=reply_markup,
                    parse_mode='HTML'
                )
        else:
            await context.bot.send_message(
                chat_id=update.effective_chat.id,
                text=welcome_text,
                reply_markup=reply_markup,
                parse_mode='HTML'
            )
        return CHOOSING
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ start: {e}")
        return ConversationHandler.END

# –ü–æ–∏—Å–∫ —Ç–∏–º–º–µ–π—Ç–∞
async def find_teammate(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    query = update.callback_query
    await query.answer()
    
    keyboard = [
        [create_button("üë• Duo", 'duo')],
        [create_button("üë•üë• Trio", 'trio')],
        [create_button("üë•üë•üë• Quad", 'quad')],
        [create_button("üë•üë•üë•+ Quad+", 'quad_plus')],
        [create_button("üîô –ù–∞–∑–∞–¥ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", 'back_to_main')]
    ]
    
    message_text = 'üéÆ –í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –ø–æ–∏—Å–∫–∞:'
    
    await safe_edit_message(
        query,
        message_text,
        reply_markup=InlineKeyboardMarkup(keyboard)
    )
    return CHOOSING

# –ü–æ–∏—Å–∫ –∫–ª–∞–Ω–∞
async def find_clan(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    query = update.callback_query
    await query.answer()
    context.user_data["app_type"] = "clan"
    
    keyboard = [
        [create_button("üìù –ü–æ–¥–∞—Ç—å –ó–∞—è–≤–∫—É", 'apply_clan')],
        [create_button("üìã –°–ø–∏—Å–æ–∫ –ó–∞—è–≤–æ–∫", 'list_clan')],
        [create_button("‚úèÔ∏è –ú–æ–∏ –∑–∞—è–≤–∫–∏", 'my_apps_clan')],
        [create_button("üîô –ù–∞–∑–∞–¥ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", 'back_to_main')]
    ]
    
    message_text = "üè∞ –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –¥–ª—è –ø–æ–∏—Å–∫–∞ –∫–ª–∞–Ω–∞:"
    
    await safe_edit_message(
        query,
        message_text,
        reply_markup=InlineKeyboardMarkup(keyboard)
    )
    return CHOOSING

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è —Ç–∏–ø–æ–≤ –∫–æ–º–∞–Ω–¥
async def duo(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    query = update.callback_query
    await query.answer()
    context.user_data['team_type'] = 'duo'
    context.user_data['app_type'] = 'teammate'
    
    keyboard = [
        [create_button("üìù –ü–æ–¥–∞—Ç—å –ó–∞—è–≤–∫—É", 'apply_duo')],
        [create_button("üìã –°–ø–∏—Å–æ–∫ –ó–∞—è–≤–æ–∫", 'list_duo')],
        [create_button("‚úèÔ∏è –ú–æ–∏ –∑–∞—è–≤–∫–∏", 'my_apps_duo')],
        [create_button("üîô –ù–∞–∑–∞–¥", 'back_to_teammate')],
        [create_button("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", 'back_to_main')]
    ]
    
    message_text = "üë• –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –¥–ª—è Duo:"
    
    await safe_edit_message(
        query,
        message_text,
        reply_markup=InlineKeyboardMarkup(keyboard)
    )
    return CHOOSING

async def trio(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    query = update.callback_query
    await query.answer()
    context.user_data['team_type'] = 'trio'
    context.user_data['app_type'] = 'teammate'
    
    keyboard = [
        [create_button("üìù –ü–æ–¥–∞—Ç—å –ó–∞—è–≤–∫—É", 'apply_trio')],
        [create_button("üìã –°–ø–∏—Å–æ–∫ –ó–∞—è–≤–æ–∫", 'list_trio')],
        [create_button("‚úèÔ∏è –ú–æ–∏ –∑–∞—è–≤–∫–∏", 'my_apps_trio')],
        [create_button("üîô –ù–∞–∑–∞–¥", 'back_to_teammate')],
        [create_button("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", 'back_to_main')]
    ]
    
    message_text = "üë•üë• –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –¥–ª—è Trio:"
    
    await safe_edit_message(
        query,
        message_text,
        reply_markup=InlineKeyboardMarkup(keyboard)
    )
    return CHOOSING

async def quad(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    query = update.callback_query
    await query.answer()
    context.user_data['team_type'] = 'quad'
    context.user_data['app_type'] = 'teammate'
    
    keyboard = [
        [create_button("üìù –ü–æ–¥–∞—Ç—å –ó–∞—è–≤–∫—É", 'apply_quad')],
        [create_button("üìã –°–ø–∏—Å–æ–∫ –ó–∞—è–≤–æ–∫", 'list_quad')],
        [create_button("‚úèÔ∏è –ú–æ–∏ –∑–∞—è–≤–∫–∏", 'my_apps_quad')],
        [create_button("üîô –ù–∞–∑–∞–¥", 'back_to_teammate')],
        [create_button("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", 'back_to_main')]
    ]
    
    message_text = "üë•üë•üë• –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –¥–ª—è Quad:"
    
    await safe_edit_message(
        query,
        message_text,
        reply_markup=InlineKeyboardMarkup(keyboard)
    )
    return CHOOSING

async def quad_plus(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    query = update.callback_query
    await query.answer()
    context.user_data['team_type'] = 'quad_plus'
    context.user_data['app_type'] = 'teammate'
    
    keyboard = [
        [create_button("üìù –ü–æ–¥–∞—Ç—å –ó–∞—è–≤–∫—É", 'apply_quad_plus')],
        [create_button("üìã –°–ø–∏—Å–æ–∫ –ó–∞—è–≤–æ–∫", 'list_quad_plus')],
        [create_button("‚úèÔ∏è –ú–æ–∏ –∑–∞—è–≤–∫–∏", 'my_apps_quad_plus')],
        [create_button("üîô –ù–∞–∑–∞–¥", 'back_to_teammate')],
        [create_button("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", 'back_to_main')]
    ]
    
    message_text = "üë•üë•üë•+ –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –¥–ª—è Quad+:"
    
    await safe_edit_message(
        query,
        message_text,
        reply_markup=InlineKeyboardMarkup(keyboard)
    )
    return CHOOSING

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞—è–≤–∫–∏
async def apply_application(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    query = update.callback_query
    await query.answer()
    
    team_type = context.user_data.get('team_type', 'duo')
    app_type = context.user_data.get('app_type', 'teammate')
    
    if app_type == 'teammate':
        message_text = (
            f"üìù –ó–∞–ø–æ–ª–Ω–∏—Ç–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–µ–±–µ –¥–ª—è {TEAM_TYPES.get(team_type, team_type)}:\n\n"
            "–£–∫–∞–∂–∏—Ç–µ —Å–ª–µ–¥—É—é—â–∏–µ –¥–∞–Ω–Ω—ã–µ (–∫–∞–∂–¥—ã–π –ø—É–Ω–∫—Ç —Å –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–∏):\n"
            "1. –í–æ–∑—Ä–∞—Å—Ç\n"
            "2. –ß–∞—Å–æ–≤ –≤ Rust\n"
            "3. –í–∞—à–∞ —Ä–æ–ª—å –≤ Rust\n"
            "4. –û–Ω–ª–∞–π–Ω –≤ –¥–µ–Ω—å\n"
            "5. Discord –¥–ª—è —Å–≤—è–∑–∏\n\n"
            "–ü—Ä–∏–º–µ—Ä –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞—è–≤–∫–∏:\n\n"
            "24 –≥–æ–¥–∞\n"
            "11000 —á–∞—Å–æ–≤\n"
            "–ö–æ–º–±–∞—Ç—ë—Ä, –§–∞—Ä–º–∏–ª–∞\n"
            "–û—Ç 5 —á–∞—Å–æ–≤ –≤ –¥–µ–Ω—å\n"
            "exemple#Discord_Vasya"
        )
    else:
        message_text = (
            "üìù –ó–∞–ø–æ–ª–Ω–∏—Ç–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–ª–∞–Ω–µ:\n\n"
            "–£–∫–∞–∂–∏—Ç–µ —Å–ª–µ–¥—É—é—â–∏–µ –¥–∞–Ω–Ω—ã–µ (–∫–∞–∂–¥—ã–π –ø—É–Ω–∫—Ç —Å –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–∏):\n"
            "1. –ù–∞–∑–≤–∞–Ω–∏–µ –∫–ª–∞–Ω–∞\n"
            "2. –ò–º—è –õ–∏–¥–µ—Ä–∞ –ö–ª–∞–Ω–∞\n"
            "3. –ö—Ç–æ —Ç—Ä–µ–±—É–µ—Ç—Å—è –≤ –∫–ª–∞–Ω\n"
            "4. –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ª—é–¥–µ–π –≤ –∫–ª–∞–Ω–µ\n"
            "5. Discord –¥–ª—è —Å–≤—è–∑–∏\n\n"
            "–ü—Ä–∏–º–µ—Ä:\n"
            "Rust Legends\n"
            "ProPlayer\n"
            "–°—Ç—Ä–æ–∏—Ç–µ–ª–∏, —ç–ª–µ–∫—Ç—Ä–∏–∫–∏\n"
            "15\n"
            "clanleader#5678"
        )
    
    keyboard = [
        [create_button("üîô –ù–∞–∑–∞–¥", f'back_to_{team_type}')],
        [create_button("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", 'back_to_main')]
    ]
    
    await safe_edit_message(
        query,
        text=message_text,
        reply_markup=InlineKeyboardMarkup(keyboard)
    )
    return TYPING_APPLICATION

# –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∑–∞—è–≤–∫–∏
async def save_application(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    try:
        user_data = update.message.text.split('\n')
        if len(user_data) != 5:
            await update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –≤—Å–µ 5 –ø—É–Ω–∫—Ç–æ–≤, –∫–∞–∂–¥—ã–π —Å –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–∏.")
            return TYPING_APPLICATION
        
        team_type = context.user_data.get('team_type', 'duo')
        app_type = context.user_data.get('app_type', 'teammate')
        user = update.message.from_user
        
        save_user(user.id, user.username or user.first_name)
        
        conn = sqlite3.connect('rust_bot.db')
        cursor = conn.cursor()
        
        if app_type == 'teammate':
            cursor.execute('''
            INSERT INTO applications 
            (user_id, app_type, team_type, age, hours, role, online, discord, date, is_active) 
            VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, 1)
            ''', (
                user.id, app_type, team_type, user_data[0].strip(), 
                user_data[1].strip(), user_data[2].strip(), 
                user_data[3].strip(), user_data[4].strip(), 
                datetime.now().strftime("%d.%m.%Y %H:%M")
            ))
            
            # –ü–æ–ª—É—á–∞–µ–º ID —Ç–æ–ª—å–∫–æ —á—Ç–æ —Å–æ–∑–¥–∞–Ω–Ω–æ–π –∑–∞—è–≤–∫–∏
            app_id = cursor.lastrowid
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –∞–¥–º–∏–Ω—Å–∫–æ–≥–æ —á–∞—Ç–∞
            notification_text = (
                "üÜï <b>–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ –Ω–∞ —Ç–∏–º–º–µ–π—Ç–∞</b>\n\n"
                f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: @{user.username or user.first_name} (ID: {user.id})\n"
                f"üìå –¢–∏–ø: {TEAM_TYPES.get(team_type, team_type)}\n"
                f"üÜî ID –∑–∞—è–≤–∫–∏: {app_id}\n\n"
                f"üéÇ –í–æ–∑—Ä–∞—Å—Ç: {user_data[0].strip()}\n"
                f"‚è± –ß–∞—Å–æ–≤ –≤ Rust: {user_data[1].strip()}\n"
                f"üéÆ –†–æ–ª—å: {user_data[2].strip()}\n"
                f"‚è≥ –û–Ω–ª–∞–π–Ω –≤ –¥–µ–Ω—å: {user_data[3].strip()}\n"
                f"üìû Discord: {user_data[4].strip()}\n"
                f"üìÖ –î–∞—Ç–∞: {datetime.now().strftime('%d.%m.%Y %H:%M')}"
            )
        else:
            cursor.execute('''
            INSERT INTO applications 
            (user_id, app_type, clan_name, leader_name, required, members_count, discord, date, is_active) 
            VALUES (?, ?, ?, ?, ?, ?, ?, ?, 1)
            ''', (
                user.id, app_type, user_data[0].strip(), 
                user_data[1].strip(), user_data[2].strip(),
                user_data[3].strip(), user_data[4].strip(),
                datetime.now().strftime("%d.%m.%Y %H:%M")
            ))
            
            # –ü–æ–ª—É—á–∞–µ–º ID —Ç–æ–ª—å–∫–æ —á—Ç–æ —Å–æ–∑–¥–∞–Ω–Ω–æ–π –∑–∞—è–≤–∫–∏
            app_id = cursor.lastrowid
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –∞–¥–º–∏–Ω—Å–∫–æ–≥–æ —á–∞—Ç–∞
            notification_text = (
                "üÜï <b>–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ –Ω–∞ –∫–ª–∞–Ω</b>\n\n"
                f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: @{user.username or user.first_name} (ID: {user.id})\n"
                f"üÜî ID –∑–∞—è–≤–∫–∏: {app_id}\n\n"
                f"üè∞ –ù–∞–∑–≤–∞–Ω–∏–µ: {user_data[0].strip()}\n"
                f"üëë –õ–∏–¥–µ—Ä: {user_data[1].strip()}\n"
                f"üîç –¢—Ä–µ–±—É—é—Ç—Å—è: {user_data[2].strip()}\n"
                f"üë• –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤: {user_data[3].strip()}\n"
                f"üìû Discord: {user_data[4].strip()}\n"
                f"üìÖ –î–∞—Ç–∞: {datetime.now().strftime('%d.%m.%Y %H:%M')}"
            )
        
        conn.commit()
        conn.close()
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ –∞–¥–º–∏–Ω—Å–∫–∏–π —á–∞—Ç
        try:
            await context.bot.send_message(
                chat_id=NOTIFICATION_CHAT_ID,
                text=notification_text,
                parse_mode='HTML'
            )
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ –∞–¥–º–∏–Ω—Å–∫–∏–π —á–∞—Ç: {e}")
        
        if app_type == 'teammate':
            response = (
                "üéâ üéâ üéâ\n\n"
                f"‚úÖ –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –Ω–∞ {TEAM_TYPES.get(team_type, team_type)} –ø–æ–¥–∞–Ω–∞:\n\n"
                f"üë§ –ò–≥—Ä–æ–∫: {user.username or user.first_name}\n"
                f"üéÇ –í–æ–∑—Ä–∞—Å—Ç: {user_data[0].strip()}\n"
                f"‚è± –ß–∞—Å–æ–≤ –≤ Rust: {user_data[1].strip()}\n"
                f"üéÆ –†–æ–ª—å: {user_data[2].strip()}\n"
                f"‚è≥ –û–Ω–ª–∞–π–Ω –≤ –¥–µ–Ω—å: {user_data[3].strip()}\n"
                f"üìû Discord: {user_data[4].strip()}\n"
                f"üìÖ –î–∞—Ç–∞: {datetime.now().strftime('%d.%m.%Y %H:%M')}\n\n"
                f"‚ÑπÔ∏è –ó–∞—è–≤–∫–∞ –±—É–¥–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —É–¥–∞–ª–µ–Ω–∞ —á–µ—Ä–µ–∑ {AUTO_DELETE_DAYS} –¥–Ω–µ–π"
            )
        else:
            response = (
                "üéâ üéâ üéâ\n\n"
                "‚úÖ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–ª–∞–Ω–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞:\n\n"
                f"üè∞ –ù–∞–∑–≤–∞–Ω–∏–µ: {user_data[0].strip()}\n"
                f"üëë –õ–∏–¥–µ—Ä: {user_data[1].strip()}\n"
                f"üîç –¢—Ä–µ–±—É—é—Ç—Å—è: {user_data[2].strip()}\n"
                f"üë• –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤: {user_data[3].strip()}\n"
                f"üìû Discord: {user_data[4].strip()}\n"
                f"üìÖ –î–∞—Ç–∞: {datetime.now().strftime('%d.%m.%Y %H:%M')}\n\n"
                f"‚ÑπÔ∏è –ó–∞—è–≤–∫–∞ –±—É–¥–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —É–¥–∞–ª–µ–Ω–∞ —á–µ—Ä–µ–∑ {AUTO_DELETE_DAYS} –¥–Ω–µ–π"
            )
        
        await update.message.reply_text(response)
        return await start(update, context)
    
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –∑–∞—è–≤–∫–∏: {e}")
        await update.message.reply_text("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –∑–∞—è–≤–∫–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        return await start(update, context)

# –°–ø–∏—Å–æ–∫ –∑–∞—è–≤–æ–∫ —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π
async def list_applications(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    try:
        query = update.callback_query
        await query.answer()
        
        team_type = context.user_data.get('team_type', 'duo')
        app_type = context.user_data.get('app_type', 'teammate')
        page = context.user_data.get('page', 0)
        
        conn = sqlite3.connect('rust_bot.db')
        cursor = conn.cursor()
        
        if app_type == 'teammate':
            cursor.execute('''
            SELECT u.username, a.age, a.hours, a.role, a.online, a.discord, a.date 
            FROM applications a
            JOIN users u ON a.user_id = u.user_id
            WHERE a.team_type = ? AND a.app_type = ? AND a.is_active = 1
            ORDER BY a.date DESC
            ''', (team_type, app_type))
        else:
            cursor.execute('''
            SELECT u.username, a.clan_name, a.leader_name, a.required, a.members_count, a.discord, a.date 
            FROM applications a
            JOIN users u ON a.user_id = u.user_id
            WHERE a.app_type = ? AND a.is_active = 1
            ORDER BY a.date DESC
            ''', (app_type,))
        
        all_apps = cursor.fetchall()
        conn.close()
        
        if not all_apps:
            keyboard = [
                [create_button("üîô –ù–∞–∑–∞–¥", f'back_to_{team_type}')],
                [create_button("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", 'back_to_main')]
            ]
            await safe_edit_message(
                query,
                f"‚ÑπÔ∏è –ù–µ—Ç –∑–∞—è–≤–æ–∫ –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ {TEAM_TYPES.get(team_type, team_type)}.",
                reply_markup=InlineKeyboardMarkup(keyboard)
            )
            return CHOOSING
        
        # –†–∞–∑–±–∏–≤–∞–µ–º –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –ø–æ 5 –∑–∞—è–≤–æ–∫
        apps_per_page = 5
        total_pages = (len(all_apps) + apps_per_page - 1) // apps_per_page
        start_idx = page * apps_per_page
        end_idx = start_idx + apps_per_page
        filtered_apps = all_apps[start_idx:end_idx]
        
        if app_type == 'teammate':
            applications_text = f"üìã –°–ø–∏—Å–æ–∫ –∑–∞—è–≤–æ–∫ {TEAM_TYPES.get(team_type, team_type)} (–°—Ç—Ä–∞–Ω–∏—Ü–∞ {page + 1}/{total_pages}):\n\n"
            for idx, app in enumerate(filtered_apps, start_idx + 1):
                applications_text += (
                    f"{idx}. üë§ {app[0]} ({app[6]})\n"
                    f"   üéÇ –í–æ–∑—Ä–∞—Å—Ç: {app[1]}\n"
                    f"   ‚è± –ß–∞—Å–æ–≤: {app[2]}\n"
                    f"   üéÆ –†–æ–ª—å: {app[3]}\n"
                    f"   ‚è≥ –û–Ω–ª–∞–π–Ω: {app[4]}\n"
                    f"   üìû Discord: {app[5]}\n\n"
                )
        else:
            applications_text = "üìã –°–ø–∏—Å–æ–∫ –∫–ª–∞–Ω–æ–≤:\n\n"
            for idx, clan in enumerate(filtered_apps, start_idx + 1):
                applications_text += (
                    f"{idx}. üè∞ {clan[1]} ({clan[6]})\n"
                    f"   üëë –õ–∏–¥–µ—Ä: {clan[2]}\n"
                    f"   üîç –¢—Ä–µ–±—É—é—Ç—Å—è: {clan[3]}\n"
                    f"   üë• –£—á–∞—Å—Ç–Ω–∏–∫–æ–≤: {clan[4]}\n"
                    f"   üìû Discord: {clan[5]}\n\n"
                )
        
        keyboard = []
        if total_pages > 1:
            nav_buttons = []
            if page > 0:
                nav_buttons.append(create_button("‚¨ÖÔ∏è –ü—Ä–µ–¥—ã–¥—É—â–∞—è", f'prev_page_{team_type}'))
            if page < total_pages - 1:
                nav_buttons.append(create_button("‚û°Ô∏è –°–ª–µ–¥—É—é—â–∞—è", f'next_page_{team_type}'))
            if nav_buttons:
                keyboard.append(nav_buttons)
        
        if app_type == 'clan':
            keyboard.append([create_button("üîô –ù–∞–∑–∞–¥", 'back_from_clan_list')])
        else:
            keyboard.append([create_button(f"üîô –ù–∞–∑–∞–¥ –∫ {TEAM_TYPES.get(team_type, team_type)}", f'back_to_{team_type}')])
        
        keyboard.append([create_button("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", 'back_to_main')])
        
        context.user_data['page'] = page
        
        await safe_edit_message(
            query,
            text=applications_text,
            reply_markup=InlineKeyboardMarkup(keyboard)
        )
        return CHOOSING
    
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ list_applications: {e}")
        await safe_edit_message(
            query,
            "‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å–ø–∏—Å–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
        )
        return await start(update, context)
    
# –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è —Å—Ç—Ä–∞–Ω–∏—Ü
async def handle_prev_page(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    query = update.callback_query
    await query.answer()
    
    context.user_data['page'] -= 1
    return await list_applications(update, context)

async def handle_next_page(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    query = update.callback_query
    await query.answer()
    
    context.user_data['page'] += 1
    return await list_applications(update, context)

# –ü–æ–∫–∞–∑–∞—Ç—å –∑–∞—è–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
async def my_applications(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    try:
        if not update.callback_query:
            logger.error("–û—à–∏–±–∫–∞: update.callback_query —Ä–∞–≤–Ω–æ None")
            return await start(update, context)
            
        query = update.callback_query
        await query.answer()
        
        user_id = query.from_user.id
        team_type = context.user_data.get('team_type', 'duo')
        app_type = context.user_data.get('app_type', 'teammate')
        
        conn = sqlite3.connect('rust_bot.db')
        cursor = conn.cursor()
        
        if app_type == 'teammate':
            cursor.execute('''
            SELECT id, age, hours, role, online, discord, date 
            FROM applications 
            WHERE user_id = ? AND team_type = ? AND app_type = ? AND is_active = 1
            ORDER BY date DESC
            ''', (user_id, team_type, app_type))
        else:
            cursor.execute('''
            SELECT id, clan_name, leader_name, required, members_count, discord, date 
            FROM applications 
            WHERE user_id = ? AND app_type = ? AND is_active = 1
            ORDER BY date DESC
            ''', (user_id, app_type))
        
        apps = cursor.fetchall()
        conn.close()
        
        if not apps:
            keyboard = [
                [create_button("üìù –ü–æ–¥–∞—Ç—å –Ω–æ–≤—É—é –∑–∞—è–≤–∫—É", f'apply_{team_type}')],
                [create_button(f"üîô –ù–∞–∑–∞–¥ –∫ {TEAM_TYPES.get(team_type, team_type)}", f'back_to_{team_type}')],
                [create_button("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", 'back_to_main')]
            ]
            await safe_edit_message(
                query,
                f"‚ÑπÔ∏è –£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞—è–≤–æ–∫ –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ {TEAM_TYPES.get(team_type, team_type)}.",
                reply_markup=InlineKeyboardMarkup(keyboard)
            )
            return CHOOSING
        
        if app_type == 'teammate':
            apps_text = f"üìã –í–∞—à–∏ –∑–∞—è–≤–∫–∏ {TEAM_TYPES.get(team_type, team_type)}:\n\n"
            for app in apps:
                apps_text += (
                    f"üÜî ID: {app[0]}\n"
                    f"üéÇ –í–æ–∑—Ä–∞—Å—Ç: {app[1]}\n"
                    f"‚è± –ß–∞—Å–æ–≤: {app[2]}\n"
                    f"üéÆ –†–æ–ª—å: {app[3]}\n"
                    f"‚è≥ –û–Ω–ª–∞–π–Ω: {app[4]}\n"
                    f"üìû Discord: {app[5]}\n"
                    f"üìÖ –î–∞—Ç–∞: {app[6]}\n\n"
                )
        else:
            apps_text = "üìã –í–∞—à–∏ –∑–∞—è–≤–∫–∏ –∫–ª–∞–Ω–æ–≤:\n\n"
            for app in apps:
                apps_text += (
                    f"üÜî ID: {app[0]}\n"
                    f"üè∞ –ù–∞–∑–≤–∞–Ω–∏–µ: {app[1]}\n"
                    f"üëë –õ–∏–¥–µ—Ä: {app[2]}\n"
                    f"üîç –¢—Ä–µ–±—É—é—Ç—Å—è: {app[3]}\n"
                    f"üë• –£—á–∞—Å—Ç–Ω–∏–∫–æ–≤: {app[4]}\n"
                    f"üìû Discord: {app[5]}\n"
                    f"üìÖ –î–∞—Ç–∞: {app[6]}\n\n"
                )
        
        keyboard = []
        for app in apps:
            keyboard.append([
                create_button(f"‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å {app[0]}", f'edit_{app[0]}'),
                create_button(f"‚ùå –£–¥–∞–ª–∏—Ç—å {app[0]}", f'delete_{app[0]}')
            ])
        
        keyboard.extend([
            [create_button("üìù –ü–æ–¥–∞—Ç—å –Ω–æ–≤—É—é –∑–∞—è–≤–∫—É", f'apply_{team_type}')],
            [create_button(f"üîô –ù–∞–∑–∞–¥ –∫ {TEAM_TYPES.get(team_type, team_type)}", f'back_to_{team_type}')],
            [create_button("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", 'back_to_main')]
        ])
        
        await safe_edit_message(
            query,
            apps_text,
            reply_markup=InlineKeyboardMarkup(keyboard)
        )
        return CHOOSING
    
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ my_applications: {e}")
        if update.callback_query:
            await safe_edit_message(
                update.callback_query,
                "‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –≤–∞—à–∏—Ö –∑–∞—è–≤–æ–∫. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
            )
        return await start(update, context)

# –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞—è–≤–∫–∏
async def edit_application(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    query = update.callback_query
    await query.answer()
    
    app_id = int(query.data.split('_')[1])
    context.user_data['editing_app_id'] = app_id
    
    conn = sqlite3.connect('rust_bot.db')
    cursor = conn.cursor()
    
    cursor.execute('SELECT app_type FROM applications WHERE id = ?', (app_id,))
    app_type = cursor.fetchone()[0]
    
    if app_type == 'teammate':
        cursor.execute('''
        SELECT age, hours, role, online, discord 
        FROM applications 
        WHERE id = ?
        ''', (app_id,))
        
        app_data = cursor.fetchone()
        message_text = (
            "‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞—è–≤–∫–∏:\n\n"
            "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ (–∫–∞–∂–¥—ã–π –ø—É–Ω–∫—Ç —Å –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–∏):\n"
            f"1. –í–æ–∑—Ä–∞—Å—Ç (—Ç–µ–∫—É—â–µ–µ: {app_data[0]})\n"
            f"2. –ß–∞—Å–æ–≤ –≤ Rust (—Ç–µ–∫—É—â–µ–µ: {app_data[1]})\n"
            f"3. –í–∞—à–∞ —Ä–æ–ª—å –≤ Rust (—Ç–µ–∫—É—â–µ–µ: {app_data[2]})\n"
            f"4. –û–Ω–ª–∞–π–Ω –≤ –¥–µ–Ω—å (—Ç–µ–∫—É—â–µ–µ: {app_data[3]})\n"
            f"5. Discord –¥–ª—è —Å–≤—è–∑–∏ (—Ç–µ–∫—É—â–µ–µ: {app_data[4]})\n\n"
            "–ü—Ä–∏–º–µ—Ä –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞—è–≤–∫–∏:\n\n"
            "24 –≥–æ–¥–∞\n"
            "11000 —á–∞—Å–æ–≤\n"
            "–ö–æ–º–±–∞—Ç—ë—Ä, –§–∞—Ä–º–∏–ª–∞\n"
            "–û—Ç 5 —á–∞—Å–æ–≤ –≤ –¥–µ–Ω—å\n"
            "exemple#Discord_Vasya"
        )
    else:
        cursor.execute('''
        SELECT clan_name, leader_name, required, members_count, discord 
        FROM applications 
        WHERE id = ?
        ''', (app_id,))
        
        app_data = cursor.fetchone()
        message_text = (
            "‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–ª–∞–Ω–µ:\n\n"
            "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ (–∫–∞–∂–¥—ã–π –ø—É–Ω–∫—Ç —Å –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–∏):\n"
            f"1. –ù–∞–∑–≤–∞–Ω–∏–µ –∫–ª–∞–Ω–∞ (—Ç–µ–∫—É—â–µ–µ: {app_data[0]})\n"
            f"2. –ò–º—è –õ–∏–¥–µ—Ä–∞ –ö–ª–∞–Ω–∞ (—Ç–µ–∫—É—â–µ–µ: {app_data[1]})\n"
            f"3. –ö—Ç–æ —Ç—Ä–µ–±—É–µ—Ç—Å—è –≤ –∫–ª–∞–Ω (—Ç–µ–∫—É—â–µ–µ: {app_data[2]})\n"
            f"4. –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ª—é–¥–µ–π –≤ –∫–ª–∞–Ω–µ (—Ç–µ–∫—É—â–µ–µ: {app_data[3]})\n"
            f"5. Discord –¥–ª—è —Å–≤—è–∑–∏ (—Ç–µ–∫—É—â–µ–µ: {app_data[4]})\n\n"
            "–ü—Ä–∏–º–µ—Ä:\n"
            "Rust Legends\n"
            "ProPlayer\n"
            "–°—Ç—Ä–æ–∏—Ç–µ–ª–∏, —ç–ª–µ–∫—Ç—Ä–∏–∫–∏\n"
            "15\n"
            "clanleader#5678"
        )
    
    conn.close()
    
    keyboard = [
        [create_button("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ", 'cancel_edit')],
        [create_button("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", 'back_to_main')]
    ]
    
    await safe_edit_message(
        query,
        text=message_text,
        reply_markup=InlineKeyboardMarkup(keyboard)
    )
    return EDITING

# –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–π –∑–∞—è–≤–∫–∏
async def save_edited_application(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    try:
        user_data = update.message.text.split('\n')
        if len(user_data) != 5:
            await update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –≤—Å–µ 5 –ø—É–Ω–∫—Ç–æ–≤, –∫–∞–∂–¥—ã–π —Å –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–∏.")
            return EDITING
        
        app_id = context.user_data.get('editing_app_id')
        if not app_id:
            await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞: –Ω–µ –Ω–∞–π–¥–µ–Ω ID –∑–∞—è–≤–∫–∏.")
            return await start(update, context)
        
        conn = sqlite3.connect('rust_bot.db')
        cursor = conn.cursor()
        
        cursor.execute('SELECT app_type FROM applications WHERE id = ?', (app_id,))
        app_type = cursor.fetchone()[0]
        
        if app_type == 'teammate':
            cursor.execute('''
            UPDATE applications 
            SET age = ?, hours = ?, role = ?, online = ?, discord = ?, date = ?
            WHERE id = ?
            ''', (
                user_data[0].strip(), user_data[1].strip(), user_data[2].strip(),
                user_data[3].strip(), user_data[4].strip(), 
                datetime.now().strftime("%d.%m.%Y %H:%M"), app_id
            ))
            
            cursor.execute('SELECT team_type FROM applications WHERE id = ?', (app_id,))
            team_type = cursor.fetchone()[0]
            context.user_data['team_type'] = team_type
            context.user_data['app_type'] = 'teammate'
            
            response = (
                f"‚úÖ –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞:\n\n"
                f"üéÇ –í–æ–∑—Ä–∞—Å—Ç: {user_data[0].strip()}\n"
                f"‚è± –ß–∞—Å–æ–≤ –≤ Rust: {user_data[1].strip()}\n"
                f"üéÆ –†–æ–ª—å: {user_data[2].strip()}\n"
                f"‚è≥ –û–Ω–ª–∞–π–Ω –≤ –¥–µ–Ω—å: {user_data[3].strip()}\n"
                f"üìû Discord: {user_data[4].strip()}\n"
                f"üìÖ –î–∞—Ç–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: {datetime.now().strftime('%d.%m.%Y %H:%M')}"
            )
        else:
            cursor.execute('''
            UPDATE applications 
            SET clan_name = ?, leader_name = ?, required = ?, members_count = ?, discord = ?, date = ?
            WHERE id = ?
            ''', (
                user_data[0].strip(), user_data[1].strip(), user_data[2].strip(),
                user_data[3].strip(), user_data[4].strip(), 
                datetime.now().strftime("%d.%m.%Y %H:%M"), app_id
            ))
            
            context.user_data['app_type'] = 'clan'
            
            response = (
                "‚úÖ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–ª–∞–Ω–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∞:\n\n"
                f"üè∞ –ù–∞–∑–≤–∞–Ω–∏–µ: {user_data[0].strip()}\n"
                f"üëë –õ–∏–¥–µ—Ä: {user_data[1].strip()}\n"
                f"üîç –¢—Ä–µ–±—É—é—Ç—Å—è: {user_data[2].strip()}\n"
                f"üë• –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤: {user_data[3].strip()}\n"
                f"üìû Discord: {user_data[4].strip()}\n"
                f"üìÖ –î–∞—Ç–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: {datetime.now().strftime('%d.%m.%Y %H:%M')}"
            )
        
        conn.commit()
        conn.close()
        
        await update.message.reply_text(response)
        return await my_applications(update, context)
    
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∑–∞—è–≤–∫–∏: {e}")
        await update.message.reply_text("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∑–∞—è–≤–∫–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        return await start(update, context)

# –£–¥–∞–ª–µ–Ω–∏–µ –∑–∞—è–≤–∫–∏
async def delete_application(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    query = update.callback_query
    await query.answer()
    
    app_id = int(query.data.split('_')[1])
    user = query.from_user
    
    conn = sqlite3.connect('rust_bot.db')
    cursor = conn.cursor()
    
    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞—è–≤–∫–µ –ø–µ—Ä–µ–¥ —É–¥–∞–ª–µ–Ω–∏–µ–º
    cursor.execute('''
    SELECT app_type, team_type, age, hours, role, online, discord, 
           clan_name, leader_name, required, members_count 
    FROM applications 
    WHERE id = ?
    ''', (app_id,))
    
    app_info = cursor.fetchone()
    
    # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞—è–≤–∫–∏ (–Ω–µ —É–¥–∞–ª—è–µ–º –ø–æ–ª–Ω–æ—Å—Ç—å—é)
    cursor.execute('UPDATE applications SET is_active = 0 WHERE id = ?', (app_id,))
    conn.commit()
    conn.close()
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –∞–¥–º–∏–Ω—Å–∫–æ–≥–æ —á–∞—Ç–∞
    if app_info[0] == 'teammate':
        notification_text = (
            "üóë <b>–ó–∞—è–≤–∫–∞ —É–¥–∞–ª–µ–Ω–∞</b>\n\n"
            f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: @{user.username or user.first_name} (ID: {user.id})\n"
            f"üìå –¢–∏–ø: {TEAM_TYPES.get(app_info[1], app_info[1])}\n"
            f"üÜî ID –∑–∞—è–≤–∫–∏: {app_id}\n\n"
            f"üéÇ –í–æ–∑—Ä–∞—Å—Ç: {app_info[2]}\n"
            f"‚è± –ß–∞—Å–æ–≤: {app_info[3]}\n"
            f"üéÆ –†–æ–ª—å: {app_info[4]}\n"
            f"‚è≥ –û–Ω–ª–∞–π–Ω: {app_info[5]}\n"
            f"üìû Discord: {app_info[6]}"
        )
    else:
        notification_text = (
            "üóë <b>–ó–∞—è–≤–∫–∞ –Ω–∞ –∫–ª–∞–Ω —É–¥–∞–ª–µ–Ω–∞</b>\n\n"
            f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: @{user.username or user.first_name} (ID: {user.id})\n"
            f"üÜî ID –∑–∞—è–≤–∫–∏: {app_id}\n"
            f"üè∞ –ù–∞–∑–≤–∞–Ω–∏–µ –∫–ª–∞–Ω–∞: {app_info[7]}\n"
            f"üëë –õ–∏–¥–µ—Ä: {app_info[8]}"
        )
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ –∞–¥–º–∏–Ω—Å–∫–∏–π —á–∞—Ç
    try:
        await context.bot.send_message(
            chat_id=NOTIFICATION_CHAT_ID,
            text=notification_text,
            parse_mode='HTML'
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ –∞–¥–º–∏–Ω—Å–∫–∏–π —á–∞—Ç: {e}")
    
    await safe_edit_message(
        query,
        "‚úÖ –ó–∞—è–≤–∫–∞ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞."
    )
    return await my_applications(update, context)

# –£–¥–∞–ª–µ–Ω–∏–µ –∏–∑ –ø–æ–∏—Å–∫–∞
async def remove_from_search(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    query = update.callback_query
    await query.answer()
    
    user_id = query.from_user.id
    
    conn = sqlite3.connect('rust_bot.db')
    cursor = conn.cursor()
    
    cursor.execute('SELECT 1 FROM applications WHERE user_id = ? AND is_active = 1', (user_id,))
    has_apps = cursor.fetchone() is not None
    
    conn.close()
    
    keyboard = [
        [create_button("‚úÖ –î–∞, —É–¥–∞–ª–∏—Ç—å –º–æ–∏ –∑–∞—è–≤–∫–∏", 'confirm_remove')],
        [create_button("‚ùå –ù–µ—Ç, –æ—Å—Ç–∞–≤–∏—Ç—å –≤—Å—ë –∫–∞–∫ –µ—Å—Ç—å", 'cancel_remove')],
        [create_button("üîô –ù–∞–∑–∞–¥ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", 'back_to_main')]
    ]
    
    message_text = "‚ùì –í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –ø—Ä–µ–∫—Ä–∞—Ç–∏—Ç—å –ø–æ–∏—Å–∫?\n\n"
    if has_apps:
        message_text += "–£ –≤–∞—Å –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–µ –∑–∞—è–≤–∫–∏ –≤ –ø–æ–∏—Å–∫–µ\n"
    else:
        message_text += "–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞—è–≤–æ–∫ –≤ –ø–æ–∏—Å–∫–µ"
    
    await safe_edit_message(
        query,
        message_text,
        reply_markup=InlineKeyboardMarkup(keyboard)
    )
    return CHOOSING

async def confirm_remove(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    query = update.callback_query
    await query.answer()
    
    user_id = query.from_user.id
    user = query.from_user
    
    conn = sqlite3.connect('rust_bot.db')
    cursor = conn.cursor()
    
    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ –∑–∞—è–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–µ—Ä–µ–¥ —É–¥–∞–ª–µ–Ω–∏–µ–º
    cursor.execute('''
    SELECT id, app_type, team_type FROM applications 
    WHERE user_id = ? AND is_active = 1
    ''', (user_id,))
    
    user_apps = cursor.fetchall()
    
    # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞—è–≤–æ–∫ (–Ω–µ —É–¥–∞–ª—è–µ–º –ø–æ–ª–Ω–æ—Å—Ç—å—é)
    cursor.execute('UPDATE applications SET is_active = 0 WHERE user_id = ?', (user_id,))
    conn.commit()
    conn.close()
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –∞–¥–º–∏–Ω—Å–∫–æ–≥–æ —á–∞—Ç–∞
    if user_apps:
        apps_list = "\n".join(
            f"üÜî {app[0]} | üìå {app[1]}{'/'+app[2] if app[2] else ''}"
            for app in user_apps
        )
        notification_text = (
            "üóë <b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–¥–∞–ª–∏–ª –≤—Å–µ —Å–≤–æ–∏ –∑–∞—è–≤–∫–∏</b>\n\n"
            f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: @{user.username or user.first_name} (ID: {user.id})\n"
            f"üî¢ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞—è–≤–æ–∫: {len(user_apps)}\n\n"
            f"üìã –°–ø–∏—Å–æ–∫ —É–¥–∞–ª–µ–Ω–Ω—ã—Ö –∑–∞—è–≤–æ–∫:\n{apps_list}"
        )
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ –∞–¥–º–∏–Ω—Å–∫–∏–π —á–∞—Ç
        try:
            await context.bot.send_message(
                chat_id=NOTIFICATION_CHAT_ID,
                text=notification_text,
                parse_mode='HTML'
            )
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ –∞–¥–º–∏–Ω—Å–∫–∏–π —á–∞—Ç: {e}")
    
    await safe_edit_message(
        query,
        "‚úÖ –í—Å–µ –≤–∞—à–∏ –∑–∞—è–≤–∫–∏ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω—ã –∏–∑ –ø–æ–∏—Å–∫–∞."
    )
    return await start(update, context)

async def cancel_remove(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    query = update.callback_query
    await query.answer()
    
    await safe_edit_message(
        query,
        "‚ùå –£–¥–∞–ª–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ. –í–∞—à–∏ –∑–∞—è–≤–∫–∏ –æ—Å—Ç–∞—é—Ç—Å—è –∞–∫—Ç–∏–≤–Ω—ã–º–∏."
    )
    return await start(update, context)

# –ì–∞–π–¥ –ø–æ –±–æ—Ç—É
async def guide(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    query = update.callback_query
    await query.answer()
    
    guide_text = (
        "üìö –ì–∞–π–¥ –ø–æ –±–æ—Ç—É:\n\n"
        "1. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏\n"
        "2. –ó–∞–ø–æ–ª–Ω—è–π—Ç–µ –∑–∞—è–≤–∫–∏ –ø–æ–ª–Ω–æ—Å—Ç—å—é –∏ –ø—Ä–∞–≤–¥–∏–≤–æ\n"
        "3. –î–ª—è –≤—ã—Ö–æ–¥–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ '–£–¥–∞–ª–∏—Ç—å—Å—è –∏–∑ –ø–æ–∏—Å–∫–∞'\n"
        "4. –ù–µ —É–∫–∞–∑—ã–≤–∞–π—Ç–µ –ª–∏—á–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∫—Ä–æ–º–µ Discord\n"
        "5. –ë—É–¥—å—Ç–µ –≤–µ–∂–ª–∏–≤—ã —Å –¥—Ä—É–≥–∏–º–∏ –∏–≥—Ä–æ–∫–∞–º–∏\n"
        "6. –ï—Å–ª–∏ —á—Ç–æ-—Ç–æ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç, —É–¥–∞–ª–∏—Ç–µ —á–∞—Ç –∏ –∑–∞–Ω–æ–≤–æ –≤–æ–π–¥–∏—Ç–µ\n\n"
        "–ü—Ä–∏—è—Ç–Ω–æ–π –∏–≥—Ä—ã! üéÆ"
    )
    
    keyboard = [[create_button("üîô –ù–∞–∑–∞–¥ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", 'back_to_main')]]
    
    await safe_edit_message(
        query,
        guide_text,
        reply_markup=InlineKeyboardMarkup(keyboard)
    )
    return CHOOSING

# –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å
async def admin_panel(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    query = update.callback_query
    await query.answer()
    
    user = update.effective_user
    if str(user.id) not in ADMIN_IDS.split(','):
        await query.edit_message_text("‚õî –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –ø–∞–Ω–µ–ª–∏.")
        return await start(update, context)
    
    admin_text = f"üëë <b>–ú–ï–ù–Æ –ê–î–ú–ò–ù–ò–°–¢–†–ê–¢–û–†–ê –ë–û–¢–ê</b>:\n\n–¢–µ–∫—É—â–∏–π –ø–µ—Ä–∏–æ–¥ –∞–≤—Ç–æ—É–¥–∞–ª–µ–Ω–∏—è: {AUTO_DELETE_DAYS} –¥–Ω–µ–π"
    
    keyboard = [
        [create_button("üìã –ü–æ–ª–Ω—ã–π —Å–ø–∏—Å–æ–∫ –∑–∞—è–≤–æ–∫", 'admin_all_apps')],
        [create_button("üïí –ò–∑–º–µ–Ω–∏—Ç—å –ø–µ—Ä–∏–æ–¥ –∞–≤—Ç–æ—É–¥–∞–ª–µ–Ω–∏—è", 'admin_set_autodelete')],
        [create_button("‚ö†Ô∏è –°–ø–∏—Å–æ–∫ –∂–∞–ª–æ–±", 'admin_complaints')],
        [create_button("üèÜ –ö–æ–Ω–∫—É—Ä—Å—ã", 'admin_contests')],
        [create_button("üîô –ù–∞–∑–∞–¥", 'back_to_main')]
    ]
    
    await safe_edit_message(
        query,
        admin_text,
        reply_markup=InlineKeyboardMarkup(keyboard)
    )
    return CHOOSING

async def admin_set_autodelete(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    query = update.callback_query
    await query.answer()
    
    user = update.effective_user
    if str(user.id) not in ADMIN_IDS.split(','):
        await query.edit_message_text("‚õî –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –ø–∞–Ω–µ–ª–∏.")
        return await start(update, context)
    
    message_text = f"üïí –¢–µ–∫—É—â–∏–π –ø–µ—Ä–∏–æ–¥ –∞–≤—Ç–æ—É–¥–∞–ª–µ–Ω–∏—è: {AUTO_DELETE_DAYS} –¥–Ω–µ–π\n\n–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤—ã–π –ø–µ—Ä–∏–æ–¥:"
    
    keyboard = [
        [create_button("1 –¥–µ–Ω—å", 'admin_set_days_1')],
        [create_button("2 –¥–Ω—è", 'admin_set_days_2')],
        [create_button("3 –¥–Ω—è", 'admin_set_days_3')],
        [create_button("4 –¥–Ω—è", 'admin_set_days_4')],
        [create_button("5 –¥–Ω–µ–π", 'admin_set_days_5')],
        [create_button("7 –¥–Ω–µ–π", 'admin_set_days_7')],
        [create_button("üîô –ù–∞–∑–∞–¥", 'admin_panel')]
    ]
    
    await safe_edit_message(
        query,
        message_text,
        reply_markup=InlineKeyboardMarkup(keyboard)
    )
    return CHOOSING

async def admin_set_days(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    query = update.callback_query
    await query.answer()
    
    global AUTO_DELETE_DAYS
    days = int(query.data.split('_')[-1])
    AUTO_DELETE_DAYS = days
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫—É –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    conn = sqlite3.connect('rust_bot.db')
    cursor = conn.cursor()
    
    # –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–µ–∫, –µ—Å–ª–∏ –µ–µ –Ω–µ—Ç
    cursor.execute('''
    CREATE TABLE IF NOT EXISTS bot_settings (
        key TEXT PRIMARY KEY,
        value TEXT
    )''')
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ
    cursor.execute('''
    INSERT OR REPLACE INTO bot_settings (key, value) 
    VALUES ('auto_delete_days', ?)
    ''', (str(days),))
    
    conn.commit()
    conn.close()
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ –∞–¥–º–∏–Ω—Å–∫–∏–π —á–∞—Ç
    notification_text = (
        f"‚öôÔ∏è <b>–ò–∑–º–µ–Ω–µ–Ω –ø–µ—Ä–∏–æ–¥ –∞–≤—Ç–æ—É–¥–∞–ª–µ–Ω–∏—è</b>\n\n"
        f"üë§ –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä: @{query.from_user.username or query.from_user.first_name}\n"
        f"üïí –ù–æ–≤—ã–π –ø–µ—Ä–∏–æ–¥: {days} –¥–Ω–µ–π"
    )
    
    try:
        await context.bot.send_message(
            chat_id=NOTIFICATION_CHAT_ID,
            text=notification_text,
            parse_mode='HTML'
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ –∞–¥–º–∏–Ω—Å–∫–∏–π —á–∞—Ç: {e}")
    
    await safe_edit_message(
        query,
        f"‚úÖ –ü–µ—Ä–∏–æ–¥ –∞–≤—Ç–æ—É–¥–∞–ª–µ–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω –Ω–∞ {days} –¥–Ω–µ–π."
    )
    return await admin_panel(update, context)

async def admin_delete_app(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    query = update.callback_query
    await query.answer()
    
    user = update.effective_user
    if str(user.id) not in ADMIN_IDS.split(','):
        await query.edit_message_text("‚õî –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –ø–∞–Ω–µ–ª–∏.")
        return await start(update, context)
    
    message_text = "üóë –í–≤–µ–¥–∏—Ç–µ ID –∑–∞—è–≤–∫–∏, –∫–æ—Ç–æ—Ä—É—é –Ω—É–∂–Ω–æ —É–¥–∞–ª–∏—Ç—å:"
    
    keyboard = [[create_button("üîô –ù–∞–∑–∞–¥ –∫ —Å–ø–∏—Å–∫—É", 'admin_all_apps')]]
    
    await safe_edit_message(
        query,
        message_text,
        reply_markup=InlineKeyboardMarkup(keyboard)
    )
    context.user_data['awaiting_app_id'] = True
    return TYPING_ADMIN_INPUT

async def admin_confirm_delete_app(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    try:
        app_id = int(update.message.text)
        context.user_data['app_to_delete'] = app_id
        
        conn = sqlite3.connect('rust_bot.db')
        cursor = conn.cursor()
        cursor.execute('SELECT 1 FROM applications WHERE id = ? AND is_active = 1', (app_id,))
        exists = cursor.fetchone()
        conn.close()
        
        if not exists:
            await update.message.reply_text("‚ùå –ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ —É–∂–µ —É–¥–∞–ª–µ–Ω–∞.")
            return await admin_all_applications(update, context)
            
        keyboard = [
            [create_button("‚úÖ –î–∞, —É–¥–∞–ª–∏—Ç—å", 'admin_execute_delete')],
            [create_button("‚ùå –ù–µ—Ç, –æ—Ç–º–µ–Ω–∏—Ç—å", 'admin_all_apps')]
        ]
        
        await update.message.reply_text(
            f"‚ùì –í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –∑–∞—è–≤–∫—É #{app_id}?",
            reply_markup=InlineKeyboardMarkup(keyboard)
        )
        return CHOOSING
        
    except ValueError:
        await update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç ID. –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ.")
        return TYPING_ADMIN_INPUT

async def admin_execute_delete(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    query = update.callback_query
    await query.answer()
    
    app_id = context.user_data.get('app_to_delete')
    if not app_id:
        await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞: ID –∑–∞—è–≤–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return await admin_all_applications(update, context)
    
    user = update.effective_user
    
    conn = sqlite3.connect('rust_bot.db')
    cursor = conn.cursor()
    
    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞—è–≤–∫–µ –ø–µ—Ä–µ–¥ —É–¥–∞–ª–µ–Ω–∏–µ–º
    cursor.execute('''
    SELECT a.user_id, u.username, a.app_type, a.team_type, a.clan_name, a.leader_name
    FROM applications a
    JOIN users u ON a.user_id = u.user_id
    WHERE a.id = ? AND a.is_active = 1
    ''', (app_id,))
    
    app_info = cursor.fetchone()
    
    if not app_info:
        await query.edit_message_text("‚ùå –ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ —É–∂–µ —É–¥–∞–ª–µ–Ω–∞.")
        return await admin_all_applications(update, context)
    
    user_id, username, app_type, team_type, clan_name, leader_name = app_info
    
    # –£–¥–∞–ª—è–µ–º –∑–∞—è–≤–∫—É
    cursor.execute('UPDATE applications SET is_active = 0 WHERE id = ?', (app_id,))
    conn.commit()
    conn.close()
    
    # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    try:
        message = f"‚ùå –í–∞—à–∞ –∑–∞—è–≤–∫–∞ (ID: {app_id}) –±—ã–ª–∞ —É–¥–∞–ª–µ–Ω–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º."
        await context.bot.send_message(chat_id=user_id, text=message)
    except Exception as e:
        logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–≤–µ–¥–æ–º–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ –∞–¥–º–∏–Ω—Å–∫–∏–π —á–∞—Ç
    if app_type == 'teammate':
        notification_text = (
            "üóë <b>–ó–∞—è–≤–∫–∞ —É–¥–∞–ª–µ–Ω–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º</b>\n\n"
            f"üë§ –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä: @{user.username or user.first_name}\n"
            f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: @{username} (ID: {user_id})\n"
            f"üÜî ID –∑–∞—è–≤–∫–∏: {app_id}\n"
            f"üìå –¢–∏–ø: {TEAM_TYPES.get(team_type, team_type)}"
        )
    else:
        notification_text = (
            "üóë <b>–ó–∞—è–≤–∫–∞ –Ω–∞ –∫–ª–∞–Ω —É–¥–∞–ª–µ–Ω–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º</b>\n\n"
            f"üë§ –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä: @{user.username or user.first_name}\n"
            f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: @{username} (ID: {user_id})\n"
            f"üÜî ID –∑–∞—è–≤–∫–∏: {app_id}\n"
            f"üè∞ –ù–∞–∑–≤–∞–Ω–∏–µ –∫–ª–∞–Ω–∞: {clan_name}\n"
            f"üëë –õ–∏–¥–µ—Ä: {leader_name}"
        )
    
    try:
        await context.bot.send_message(
            chat_id=NOTIFICATION_CHAT_ID,
            text=notification_text,
            parse_mode='HTML'
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ –∞–¥–º–∏–Ω—Å–∫–∏–π —á–∞—Ç: {e}")
    
    await query.edit_message_text(f"‚úÖ –ó–∞—è–≤–∫–∞ {app_id} —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞.")
    return await admin_all_applications(update, context)

async def admin_all_applications(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    query = update.callback_query
    await query.answer()
    
    user = update.effective_user
    if str(user.id) not in ADMIN_IDS.split(','):
        await query.edit_message_text("‚õî –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –ø–∞–Ω–µ–ª–∏.")
        return await start(update, context)
    
    page = context.user_data.get('admin_page', 0)
    apps_per_page = 10
    
    conn = sqlite3.connect('rust_bot.db')
    cursor = conn.cursor()
    
    # –ü–æ–ª—É—á–∞–µ–º –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞—è–≤–æ–∫
    cursor.execute('SELECT COUNT(*) FROM applications')
    total_apps = cursor.fetchone()[0]
    
    # –ü–æ–ª—É—á–∞–µ–º –∑–∞—è–≤–∫–∏ –¥–ª—è —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    cursor.execute('''
    SELECT a.id, u.username, a.app_type, a.team_type, a.date, a.is_active 
    FROM applications a
    JOIN users u ON a.user_id = u.user_id
    ORDER BY a.date DESC
    LIMIT ? OFFSET ?
    ''', (apps_per_page, page * apps_per_page))
    
    apps = cursor.fetchall()
    conn.close()
    
    if not apps:
        await safe_edit_message(
            query,
            "‚ÑπÔ∏è –í –±–∞–∑–µ –Ω–µ—Ç –∑–∞—è–≤–æ–∫.",
            reply_markup=InlineKeyboardMarkup([[create_button("üîô –ù–∞–∑–∞–¥", 'admin_panel')]])
        )
        return CHOOSING
    
    apps_text = f"üìã <b>–°–ø–∏—Å–æ–∫ –∑–∞—è–≤–æ–∫ (—Å—Ç—Ä–∞–Ω–∏—Ü–∞ {page + 1}/{(total_apps + apps_per_page - 1) // apps_per_page}):</b>\n\n"
    for app in apps:
        status = "‚úÖ –ê–∫—Ç–∏–≤–Ω–∞" if app[5] else "‚ùå –ù–µ–∞–∫—Ç–∏–≤–Ω–∞"
        apps_text += (
            f"üÜî {app[0]} | üë§ {app[1]} | "
            f"üìå {app[2]}{'/'+app[3] if app[3] else ''} | "
            f"üìÖ {app[4]} | {status}\n"
        )
    
    keyboard = []
    
    # –ö–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –ø–æ —Å—Ç—Ä–∞–Ω–∏—Ü–∞–º
    if page > 0:
        keyboard.append([create_button("‚¨ÖÔ∏è –ü—Ä–µ–¥—ã–¥—É—â–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞", 'admin_prev_page')])
    if (page + 1) * apps_per_page < total_apps:
        keyboard.append([create_button("‚û°Ô∏è –°–ª–µ–¥—É—é—â–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞", 'admin_next_page')])
    
    # –ö–Ω–æ–ø–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∑–∞—è–≤–∫–∏
    keyboard.append([create_button("üóë –£–¥–∞–ª–∏—Ç—å –∑–∞—è–≤–∫—É", 'admin_delete_app')])
    
    keyboard.append([create_button("üîô –ù–∞–∑–∞–¥", 'admin_panel')])
    
    context.user_data['admin_page'] = page
    
    await safe_edit_message(
        query,
        apps_text,
        reply_markup=InlineKeyboardMarkup(keyboard)
    )
    return CHOOSING

async def admin_next_page(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    query = update.callback_query
    await query.answer()
    
    context.user_data['admin_page'] = context.user_data.get('admin_page', 0) + 1
    return await admin_all_applications(update, context)

async def admin_prev_page(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    query = update.callback_query
    await query.answer()
    
    context.user_data['admin_page'] = max(0, context.user_data.get('admin_page', 0) - 1)
    return await admin_all_applications(update, context)

async def admin_complaints(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    query = update.callback_query
    await query.answer()
    
    user = update.effective_user
    if str(user.id) not in ADMIN_IDS.split(','):
        await query.edit_message_text("‚õî –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –ø–∞–Ω–µ–ª–∏.")
        return await start(update, context)
    
    complaints_text = "‚ö†Ô∏è <b>–°–ø–∏—Å–æ–∫ –∂–∞–ª–æ–±:</b>\n\n"
    complaints_text += "–§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ. –ó–¥–µ—Å—å –±—É–¥–µ—Ç –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å—Å—è —Å–ø–∏—Å–æ–∫ –∂–∞–ª–æ–± –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π."
    
    keyboard = [
        [create_button("üîô –ù–∞–∑–∞–¥", 'admin_panel')],
        [create_button("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", 'back_to_main')]
    ]
    
    await safe_edit_message(
        query,
        complaints_text,
        reply_markup=InlineKeyboardMarkup(keyboard)
    )
    return CHOOSING

async def admin_contests(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    query = update.callback_query
    await query.answer()
    
    user = update.effective_user
    if str(user.id) not in ADMIN_IDS.split(','):
        await query.edit_message_text("‚õî –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –ø–∞–Ω–µ–ª–∏.")
        return await start(update, context)
    
    contests_text = "üèÜ <b>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–æ–Ω–∫—É—Ä—Å–∞–º–∏:</b>\n\n"
    contests_text += "–§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ. –ó–¥–µ—Å—å –±—É–¥–µ—Ç —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–æ–Ω–∫—É—Ä—Å–∞–º–∏."
    
    keyboard = [
        [create_button("üîô –ù–∞–∑–∞–¥", 'admin_panel')],
        [create_button("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", 'back_to_main')]
    ]
    
    await safe_edit_message(
        query,
        contests_text,
        reply_markup=InlineKeyboardMarkup(keyboard)
    )
    return CHOOSING

# –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞
async def cancel_edit(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    await update.callback_query.answer("‚ùå –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.")
    return await start(update, context)

async def my_apps_clan(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    context.user_data['app_type'] = 'clan'
    context.user_data['team_type'] = 'clan'
    return await my_applications(update, context)

async def back_to_clan(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≤ –º–µ–Ω—é –∫–ª–∞–Ω–∞ (–∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤ –¥—Ä—É–≥–∏—Ö –º–µ—Å—Ç–∞—Ö)."""
    return await find_clan(update, context)

async def back_from_clan_list(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≤ –º–µ–Ω—é –≤—ã–±–æ—Ä–∞ –¥–µ–π—Å—Ç–≤–∏–π –¥–ª—è –∫–ª–∞–Ω–∞."""
    return await find_clan(update, context)

def main() -> None:
    application = ApplicationBuilder().token("118050186477:AAHaULshRa8ZdnIe8SV5sAEjjBwT487FtCw").build()
    
    async def error_handler(update: object, context: ContextTypes.DEFAULT_TYPE) -> None:
        logger.error(msg="Exception while handling an update:", exc_info=context.error)
        if update and update.callback_query:
            try:
                await update.callback_query.answer("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
            except:
                pass
    
    application.add_error_handler(error_handler)
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–¥–∞—á—É –¥–ª—è –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ä—ã—Ö –∑–∞—è–≤–æ–∫
    if application.job_queue:
        application.job_queue.run_repeating(
            delete_old_applications,
            interval=CHECK_OLD_APPLICATIONS_INTERVAL,
            first=10
        )
    else:
        logger.warning("JobQueue –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω. –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ —Å—Ç–∞—Ä—ã—Ö –∑–∞—è–≤–æ–∫ –Ω–µ –±—É–¥–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å.")
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ ConversationHandler
    conv_handler = ConversationHandler(
        entry_points=[CommandHandler('start', start)],
        states={
            CHOOSING: [
                CallbackQueryHandler(find_teammate, pattern='^find_teammate$'),
                CallbackQueryHandler(find_clan, pattern='^find_clan$'),
                CallbackQueryHandler(remove_from_search, pattern='^remove_from_search$'),
                CallbackQueryHandler(guide, pattern='^guide$'),
                CallbackQueryHandler(admin_panel, pattern='^admin_panel$'),
                CallbackQueryHandler(admin_complaints, pattern='^admin_complaints$'),
                CallbackQueryHandler(admin_contests, pattern='^admin_contests$'),
                CallbackQueryHandler(admin_set_autodelete, pattern='^admin_set_autodelete$'),
                CallbackQueryHandler(admin_delete_app, pattern='^admin_delete_app$'),
                CallbackQueryHandler(admin_set_days, pattern='^admin_set_days_'),
                CallbackQueryHandler(admin_all_applications, pattern='^admin_all_apps$'),
                CallbackQueryHandler(admin_next_page, pattern='^admin_next_page$'),
                CallbackQueryHandler(admin_prev_page, pattern='^admin_prev_page$'),
                CallbackQueryHandler(admin_execute_delete, pattern='^admin_execute_delete$'),
                
                # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è —Ç–∏–ø–æ–≤ –∫–æ–º–∞–Ω–¥
                CallbackQueryHandler(duo, pattern='^duo$'),
                CallbackQueryHandler(trio, pattern='^trio$'),
                CallbackQueryHandler(quad, pattern='^quad$'),
                CallbackQueryHandler(quad_plus, pattern='^quad_plus$'),
                
                # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –∫–Ω–æ–ø–æ–∫ "–ù–∞–∑–∞–¥"
                CallbackQueryHandler(find_teammate, pattern='^back_to_teammate$'),
                CallbackQueryHandler(duo, pattern='^back_to_duo$'),
                CallbackQueryHandler(trio, pattern='^back_to_trio$'),
                CallbackQueryHandler(quad, pattern='^back_to_quad$'),
                CallbackQueryHandler(quad_plus, pattern='^back_to_quad_plus$'),
                CallbackQueryHandler(find_clan, pattern='^back_to_clan$'),
                
                # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –∫–ª–∞–Ω–∞
                CallbackQueryHandler(apply_application, pattern='^apply_clan$'),
                CallbackQueryHandler(list_applications, pattern='^list_clan$'),
                CallbackQueryHandler(my_apps_clan, pattern='^my_apps_clan$'),
                CallbackQueryHandler(back_from_clan_list, pattern='^back_from_clan_list$'),
                
                # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è —Ç–∏–º–º–µ–π—Ç–æ–≤
                CallbackQueryHandler(apply_application, pattern='^apply_(duo|trio|quad|quad_plus)$'),
                CallbackQueryHandler(list_applications, pattern='^list_(duo|trio|quad|quad_plus)$'),
                CallbackQueryHandler(my_applications, pattern='^my_apps_(duo|trio|quad|quad_plus)$'),
                
                # –û–±—â–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
                CallbackQueryHandler(edit_application, pattern='^edit_'),
                CallbackQueryHandler(delete_application, pattern='^delete_'),
                CallbackQueryHandler(confirm_remove, pattern='^confirm_remove$'),
                CallbackQueryHandler(cancel_remove, pattern='^cancel_remove$'),
                CallbackQueryHandler(handle_prev_page, pattern='^prev_page_'),
                CallbackQueryHandler(handle_next_page, pattern='^next_page_'),
                CallbackQueryHandler(cancel_edit, pattern='^cancel_edit$'),
                
                # –ù–∞–≤–∏–≥–∞—Ü–∏—è
                CallbackQueryHandler(start, pattern='^back_to_main$'),
            ],
            TYPING_APPLICATION: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, save_application),
                CallbackQueryHandler(start, pattern='^back_to_main$'),
            ],
            TYPING_ADMIN_INPUT: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, admin_confirm_delete_app),
                CallbackQueryHandler(start, pattern='^back_to_main$'),
            ],
            EDITING: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, save_edited_application),
                CallbackQueryHandler(cancel_edit, pattern='^cancel_edit$'),
            ]
        },
        fallbacks=[CommandHandler('start', start)],
        per_message=False
    )
    
    application.add_handler(conv_handler)
    
    # –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤—É—é –∫–æ–º–∞–Ω–¥—É –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
    async def test(update: Update, context: ContextTypes.DEFAULT_TYPE):
        await update.message.reply_text("–ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start")
    
    application.add_handler(CommandHandler('test', test))
    
    logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –æ–∂–∏–¥–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–π...")
    application.run_polling()

if __name__ == '__main__':
    main()
